install.packages(c("BiocManager", "digest", "gert", "httr2", "hunspell", "openssl", "RcppEigen", "rjson", "rmarkdown", "xfun"))
install.packages("nlme", lib="/opt/homebrew/Cellar/r/4.4.1/lib/R/library")
install.packages("nlme", lib="/opt/homebrew/Cellar/r/4.4.1/lib/R/library")
require("yaml")
miAmbiente <- list()
miAmbiente$modalidad <-  "conceptual"
miAmbiente$dataset_pequeno <- "~/datasets/conceptual_dataset_pequeno.csv"
miAmbiente$dataset_competencia <- "~/datasets/conceptual_competencia_2024.csv.gz"
# aqui va su primer semilla
miAmbiente$semilla_primigenia <- 102191L
write_yaml( miAmbiente,
file="~/buckets/b1/miAmbiente.yml" )
# mantenimiento del ambiente
dir.create("~/buckets/b1/exp/", showWarnings = FALSE)
dir.create("~/buckets/b1/repos/", showWarnings = FALSE)
dir.create("~/buckets/b1/repos/labo2024ba", showWarnings = FALSE)
cat("Espere unos minutos mientras se hace un backup\n")
system( "~/install/repobrutalcopy.sh" )
# Este script verifica existencia y consistencia de su ambiente
#   archivo  ~/buckets/b1/miAmbiente.yml
require("yaml")
require("primes")
#------------------------------------------------------------------------------
# Error catching
options(error = function() {
traceback(20)
options(error = NULL)
stop("He habido un error catastrofico, solicite ayuda lo antes posible.")
})
#------------------------------------------------------------------------------
if( !file.exists( "~/buckets/b1/miAmbiente.yml" ) )
stop( "Error catastrofico, no existe el archivo ~/buckets/b1/miAmbiente.yml" )
miAmbiente <- read_yaml( "~/buckets/b1/miAmbiente.yml" )
if( ! is.list( miAmbiente ) )
stop( "Error catastrofico, formato de archivo no es una lista" )
if( !( "semilla_primigenia" %in% names( miAmbiente ) ) )
stop( "Error no existe el campo semilla_primigenia" )
if( ! is.integer( miAmbiente$semilla_primigenia ) )
stop( "Error, semilla_primigenia debe ser un numero entero, verifico que termine con la letra L?" )
if(  miAmbiente$semilla_primigenia < 100000L )
stop( "Error, semilla_primigenia debe ser mayor a 100000" )
if(  miAmbiente$semilla_primigenia > 1000000L )
stop( "Error, semilla_primigenia debe ser menor a 1000000" )
if(  ! is_prime( miAmbiente$semilla_primigenia ) )
stop( "Error, semilla_primigenia debe ser un numero primo" )
#------------------
if( !( "modalidad" %in% names( miAmbiente ) ) )
stop( "Error no existe el campo  modalidad" )
if( ! is.character( miAmbiente$modalidad ) )
stop( "Error, modalidad debe ser un character?" )
if( !( miAmbiente$modalidad %in% c( "conceptual", "vivencial" )) )
stop( "Error el campo modalidad solo puede tomar los valores  'conceptual' o 'vivencial'" )
if( Sys.getenv("USER") == "jenic" &  miAmbiente$modalidad != "vivencial" )
stop( "Jorge Nicolau, usted debe mandatoriamente elegir la modalidad vivencial" )
if( Sys.getenv("USER") == "hernangalletti" &  miAmbiente$modalidad != "vivencial" )
stop( "Hernan Galletti, usted debe mandatoriamente elegir la modalidad vivencial" )
#------------------
if( !( "dataset_pequeno" %in% names( miAmbiente ) ) )
stop( "Error no existe el campo  dataset_pequeno" )
if( ! is.character( miAmbiente$dataset_pequeno ) )
stop( "Error, dataset_pequeno debe ser un character?" )
if( !( miAmbiente$dataset_pequeno %in% c( "~/datasets/conceptual_dataset_pequeno.csv", "~/datasets/vivencial_dataset_pequeno.csv" )) )
stop( "Error el campo dataset_pequeno solo puede tomar los valores  '~/datasets/conceptual_dataset_pequeno.csv', '~/datasets/vivencial_dataset_pequeno.csv' " )
if( miAmbiente$modalidad == "conceptual" & miAmbiente$dataset_pequeno != "~/datasets/conceptual_dataset_pequeno.csv" )
stop( "Error, Inconsistencia usted eligio la modalidad conceptual pero su dataset_pequeno NO es  '~/datasets/conceptual_dataset_pequeno.csv'" )
if( miAmbiente$modalidad == "vivencial" & miAmbiente$dataset_pequeno != "~/datasets/vivencial_dataset_pequeno.csv" )
stop( "Error, Inconsistencia usted eligio la modalidad vivencial pero su dataset_pequeno NO es  '~/datasets/vivencial_dataset_pequeno.csv'" )
if( ! file.exists( miAmbiente$dataset_pequeno ) )
stop( paste0( "No existe en su maquina virtual el archivo : ", miAmbiente$dataset_pequeno ) )
#------------------
if( !( "dataset_competencia" %in% names( miAmbiente ) ) )
stop( "Error no existe el campo  dataset_competencia" )
if( ! is.character( miAmbiente$dataset_competencia ) )
stop( "Error, dataset_competencia debe ser un character?" )
if( !( miAmbiente$dataset_competencia %in% c( "~/datasets/conceptual_competencia_2024.csv.gz", "~/datasets/vivencial_competencia_2024.csv.gz" )) )
stop( "Error el campo dataset_competencia solo puede tomar los valores  '~/datasets/conceptual_competencia_2024.csv.gz', '~/datasets/vivencial_competencia_2024.csv.gz'  " )
if( miAmbiente$modalidad == "conceptual" & miAmbiente$dataset_competencia != "~/datasets/conceptual_competencia_2024.csv.gz" )
stop( "Error, Inconsistencia usted eligio la modalidad conceptual pero su dataset_competencia NO es  '~/datasets/conceptual_competencia_2024.csv.gz'" )
if( miAmbiente$modalidad == "vivencial" & miAmbiente$dataset_competencia != "~/datasets/vivencial_competencia_2024.csv.gz" )
stop( "Error, Inconsistencia usted eligio la modalidad vivencial pero su dataset_competencia NO es  '~/datasets/vivencial_competencia_2024.csv.gz'" )
if( ! file.exists( miAmbiente$dataset_competencia ) )
stop( paste0( "No existe en su maquina virtual el archivo : ", miAmbiente$dataset_competencia ) )
#------------------
cat("\n\n  Ambiente verificado, todo se encuentra bien. No tema.\n\n" )
source("~/labo2024ba/src/drifting/315_graficar_densidades_FA_v1.r")
# Ranger  una libreria que implementa el algoritmo Random Forest
# limpio la memoria
rm(list = ls()) # Borro todos los objetos
gc() # Garbage Collection
require("data.table")
require("yaml")
require("ranger")
require("randomForest") # solo se usa para imputar nulos
PARAM <- list()
PARAM$experimento <- 3720
# hiperparámetros de Random Forest
PARAM$ranger <- list(
"num.trees" = 300, # cantidad de arboles
"mtry" = 13, # cantidad de atributos que participan en cada split
"min.node.size" = 50, # tamaño minimo de las hojas
"max.depth" = 10 # 0 significa profundidad infinita
)
#------------------------------------------------------------------------------
#------------------------------------------------------------------------------
setwd("~/buckets/b1/") # Establezco el Working Directory
# creo la carpeta donde va el experimento
dir.create("./exp/", showWarnings = FALSE)
carpeta_experimento <- paste0("./exp/KA", PARAM$experimento, "/")
dir.create(paste0("./exp/KA", PARAM$experimento, "/"),
showWarnings = FALSE
)
setwd(carpeta_experimento)
#cargo miAmbiente
miAmbiente <- read_yaml( "~/buckets/b1/miAmbiente.yml" )
# cargo los datos
dataset <- fread( miAmbiente$dataset_pequeno )
# asigno un valor muy negativo
#  estas dos lineas estan relacionadas con el Data Drifting
if( "Master_Finiciomora" %in% colnames(dataset) )
dataset[ is.na(Master_Finiciomora) , Master_Finiciomora := -999 ]
if( "Visa_Finiciomora" %in% colnames(dataset) )
dataset[ is.na(Visa_Finiciomora) , Visa_Finiciomora :=  -999 ]
# defino donde entreno y donde aplico el modelo
dtrain <- dataset[foto_mes == 202107]
dapply <- dataset[foto_mes == 202109]
set.seed( miAmbiente$semilla_primigenia ) # Establezco la semilla aleatoria
# ranger necesita la clase de tipo factor
factorizado <- as.factor(dtrain$clase_ternaria)
dtrain[, clase_ternaria := factorizado]
# imputo los nulos, ya que ranger no acepta nulos
# Leo Breiman, ¿por que le temias a los nulos?
dtrain <- na.roughfix(dtrain)
setorder(dtrain, clase_ternaria) # primero quedan los BAJA+1, BAJA+2, CONTINUA
# genero el modelo de Random Forest llamando a ranger()
modelo <- ranger(
formula = "clase_ternaria ~ .",
data = dtrain,
probability = TRUE, # para que devuelva las probabilidades
num.trees = PARAM$ranger$num.trees,
mtry = PARAM$ranger$mtry,
min.node.size = PARAM$ranger$min.node.size,
max.depth = PARAM$ranger$max.depth
)
# Carpinteria necesaria sobre  dapply
# como quiere la Estadistica Clasica, imputar nulos por separado
# ( aunque en este caso ya tengo los datos del futuro de anteman
#  pero bueno, sigamos el librito de estos fundamentalistas a rajatabla ...
dapply[, clase_ternaria := NULL]
dapply <- na.roughfix(dapply)
# aplico el modelo recien creado a los datos del futuro
prediccion <- predict(modelo, dapply)
# Genero la entrega para Kaggle
entrega <- as.data.table(list(
"numero_de_cliente" = dapply[, numero_de_cliente],
"Predicted" = as.numeric(prediccion$predictions[, "BAJA+2"] > 1 / 40)
)) # genero la salida
nom_arch_kaggle <- "KA3720_001.csv"
# genero el archivo para Kaggle
fwrite(entrega,
file = nom_arch_kaggle,
sep = ","
)
# subo a Kaggle
# preparo todo para el submit
comentario <- paste0( "'",
"num.trees=", PARAM$ranger$num.trees,
" mtry=", PARAM$ranger$mtry,
" min.node.size=", PARAM$ranger$min.node.size,
" max.depth=", PARAM$ranger$max.depth,
"'"
)
comando <- paste0( "~/install/proc_kaggle_submit.sh ",
"TRUE ",
miAmbiente$modalidad, " ",
nom_arch_kaggle, " ",
comentario
)
ganancia <- system( comando, intern=TRUE )
cat( paste0( ganancia, "\t", nom_arch_kaggle, "\n"),
file="tb_ganancias.txt",
append=TRUE
)
